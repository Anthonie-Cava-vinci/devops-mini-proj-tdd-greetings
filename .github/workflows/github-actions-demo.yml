name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]
jobs:
    Explore-GitHub-Actions:
        runs-on: ubuntu-latest
        steps:
            - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
            - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
            - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
            - name: Check out repository code
              uses: actions/checkout@v4
            - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
            - run: echo "🖥️ The workflow is now ready to test your code on the runner."
            - name: List files in the repository
              run: |
                  ls ${{ github.workspace }}
            - run: echo "🍏 This job's status is ${{ job.status }}."
            - run: npm install
            - name: Display start time
              run: |
                  echo "Pipeline started at $(date +"%T")"
            - run: |
                  npm run prettier 
                  echo "formatté"
            - run: |
                  npm run test -- --coverage
                  echo "testé"
            - name: Check Jest coverage
              run: |
                  COVERAGE_THRESHOLD=80
                  ACTUAL_COVERAGE=$(sed -n 's/^Statements.*: \([0-9]*\.[0-9]*\)%.*/\1/p' coverage/lcov-report/index.html)
                  if [[ -n $ACTUAL_COVERAGE ]]; then
                    if (( $(echo "$ACTUAL_COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
                      echo "Coverage is below the threshold ($ACTUAL_COVERAGE%)"
                      exit 1
                    else
                      echo "Coverage is above the threshold ($ACTUAL_COVERAGE%)"
                    fi
                  else
                    echo "Error: Coverage percentage not found or invalid."
                    exit 1
                  fi
            - run: |
                  npm run build
                  echo "buildé"
            - name: Display end time
              run: |
                  echo "Pipeline ended at $(date +"%T")"
            - name: Display success message
              if: ${{ success() }}
              run: echo "PIPELINE SUCCESS WITHOUT ERRORS"
